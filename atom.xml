<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Colsrch&#39;Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://colsrch.top/"/>
  <updated>2020-07-15T10:55:28.358Z</updated>
  <id>https://colsrch.top/</id>
  
  <author>
    <name>Colsrch</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo-offline-popup插件（加速你博客的访问速度</title>
    <link href="https://colsrch.top/posts/32c8ba21/"/>
    <id>https://colsrch.top/posts/32c8ba21/</id>
    <published>2020-07-05T06:01:42.000Z</published>
    <updated>2020-07-15T10:55:28.358Z</updated>
    
    <content type="html"><![CDATA[<div class="note success"><p>加速你博客的访问速度，并在博客有更新时弹窗提醒。</p></div><a id="more"></a><h2 id="hexo-offline-popup"><a href="#hexo-offline-popup" class="headerlink" title="hexo-offline-popup"></a>hexo-offline-popup</h2><p>hexo-offline-popup 是一个 <a href="https://hexo.io/" target="_blank" rel="noopener">hexo</a> 插件， 它可加速你的Hexo网站的加载速度，以及网站内容更新弹窗提示。</p><h2 id="食用方法"><a href="#食用方法" class="headerlink" title="食用方法"></a>食用方法</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>在Hexo根目录打开<code>Git-bash</code> ，执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-offline-popup --save</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在博客根目录的<code>_config.yml</code>中添加如下配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># offline config passed to sw-precache.</span></span><br><span class="line"><span class="attr">service_worker:</span></span><br><span class="line">  <span class="attr">maximumFileSizeToCacheInBytes:</span> <span class="number">5242880</span></span><br><span class="line">  <span class="attr">staticFileGlobs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">public/**/*.&#123;js,html,css,png,jpg,gif,svg,eot,ttf,woff,woff2&#125;</span></span><br><span class="line">  <span class="attr">stripPrefix:</span> <span class="string">public</span></span><br><span class="line">  <span class="attr">verbose:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>如果你有CDN资源，例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- https:&#x2F;&#x2F;unpkg.com&#x2F;artitalk</span><br><span class="line">- https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;artitalk</span><br></pre></td></tr></table></figure><p>将此配置添加到根目录的<code>_config.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">service_worker:</span></span><br><span class="line">  <span class="attr">runtimeCaching:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">urlPattern:</span> <span class="string">/*</span></span><br><span class="line">      <span class="attr">handler:</span> <span class="string">cacheFirst</span></span><br><span class="line">      <span class="attr">options:</span></span><br><span class="line">        <span class="attr">origin:</span> <span class="string">unpkg.com</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">urlPattern:</span> <span class="string">/*</span></span><br><span class="line">      <span class="attr">handler:</span> <span class="string">cacheFirst</span></span><br><span class="line">      <span class="attr">options:</span></span><br><span class="line">        <span class="attr">origin:</span> <span class="string">cdn.jsdelivr.net</span></span><br></pre></td></tr></table></figure><h3 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h3><p>执行该代码激活并使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl &amp;&amp; hexo g -d</span><br></pre></td></tr></table></figure><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p>由于该弹窗仅在博客更新时会弹出，因此留了一个弹窗演示站</p><div class="note "><p>弹窗演示站：<a href="https://pfc049.coding-pages.com/" target="_blank" rel="noopener">https://pfc049.coding-pages.com/</a></p></div><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="安装后未弹窗"><a href="#安装后未弹窗" class="headerlink" title="安装后未弹窗"></a>安装后未弹窗</h3><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>该插件仅部署后生效，本地运行不生效</p>            </div><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>安装该插件后第一次打开网站不弹窗，后续更新将会弹窗</p>            </div><div class="note "><p>插件地址：<a href="https://github.com/Colsrch/hexo-offline-popup" target="_blank" rel="noopener">hexo-offline-popup</a></p></div>]]></content>
    
    <summary type="html">
    
      hexo-offline-popup 是一个 hexo 插件， 它可加速你的Hexo网站的加载速度，以及网站内容更新弹窗提示。
    
    </summary>
    
    
      <category term="Hexo" scheme="https://colsrch.top/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://colsrch.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>去不图床（荐）</title>
    <link href="https://colsrch.top/posts/d2f6d1d9/"/>
    <id>https://colsrch.top/posts/d2f6d1d9/</id>
    <published>2020-07-02T07:51:58.000Z</published>
    <updated>2020-07-15T10:55:28.358Z</updated>
    
    <content type="html"><![CDATA[<p>再给大家推荐一波<a href="https://dusays.com/" target="_blank" rel="noopener">杜老师说</a>旗下的<a href="https://7bu.top/" target="_blank" rel="noopener">去不图床</a>，图片访问速度快，图床稳定，可搜索网址访问或通过本站 <code>小功能</code> <code>→</code> <code>去不图床</code> 访问</p><a id="more"></a><hr><h3 id="关于图床"><a href="#关于图床" class="headerlink" title="关于图床"></a>关于图床</h3><p>去不图床使用开源程序搭建，底层阿里云香港云主机，高配置保障程序稳定性。CN2线路200M带宽，带来极速外链体验。至少99%在线率，使上传的图片始终可访问。域名及服务器续费十年之久，不再担心出现跑路，放心上传图片。</p><h3 id="图床特点"><a href="#图床特点" class="headerlink" title="图床特点"></a>图床特点</h3><blockquote><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>开源程序搭建，可二次开发提供更多需要的功能；</p>            </div><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>高配置阿里云主机，保障在线及稳定性；</p>            </div><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>CN2线路200M带宽，国内仍可高速访问；</p>            </div><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>提供付费功能，保障域名及服务器长久运行。</p>            </div></blockquote>]]></content>
    
    <summary type="html">
    
      再给大家推荐一波杜老师说旗下的去不图床，图片访问速度快，图床稳定
    
    </summary>
    
    
      <category term="杂文" scheme="https://colsrch.top/categories/%E6%9D%82%E6%96%87/"/>
    
    
      <category term="杂文" scheme="https://colsrch.top/tags/%E6%9D%82%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>即刻图床</title>
    <link href="https://colsrch.top/posts/1c6207a/"/>
    <id>https://colsrch.top/posts/1c6207a/</id>
    <published>2020-06-28T02:28:14.000Z</published>
    <updated>2020-07-15T10:55:28.358Z</updated>
    
    <content type="html"><![CDATA[<p>给大家推荐个东西，Microsoft Edge 插件中心里面的，叫<code>即刻图床</code>。</p><p>上传图片的速度蛮快的，也挺方便的。可以自定义CDN服务商。</p><a id="more"></a><p>但是稳定性<del>能够坚持多久</del>咱也不知道。</p><p>因此那种不是长时间需要的图可以用这个生成。像那种Avatar之类的还是用稳定的图床为好。</p><p>另外这个功能可以右击网页中的图片上传 ↓ ↓ ↓</p><p><img src="https://ae02.alicdn.com/kf/H1bbcf7e15be647fbb7dcb968b6d79c28m.png" alt=""></p><p>下面给一个我生成的测试图片链接，通过即刻图床生成的。</p><p><img src="https://ae02.alicdn.com/kf/H9fb6f21de78f46129e2b5993904e6615I.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      给大家推荐个东西，Microsoft Edge 插件中心里面的，叫`即刻图床`。&lt;br&gt;上传图片的速度蛮快的，也挺方便的。可以自定义CDN服务商。
    
    </summary>
    
    
      <category term="杂文" scheme="https://colsrch.top/categories/%E6%9D%82%E6%96%87/"/>
    
    
      <category term="杂文" scheme="https://colsrch.top/tags/%E6%9D%82%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>十年之约申请中</title>
    <link href="https://colsrch.top/posts/1f0729d0/"/>
    <id>https://colsrch.top/posts/1f0729d0/</id>
    <published>2020-06-15T15:49:37.000Z</published>
    <updated>2020-07-15T10:55:28.358Z</updated>
    
    <content type="html"><![CDATA[<p>今天在逛别人的博客时发现了<a href="https://www.foreverblog.cn/" target="_blank" rel="noopener">十年之约</a>这个由众多博主发起的一个持续更新博客的十年以上的项目 “十年之约”。在这个短视频迅速发展的时代，以文字为主的博客内容是越来越不受关注了。</p><a id="more"></a><p>还记得一二月份的时候，兴致勃勃的想着要自建一个完全属于自己的博客，特别是到了4月份开始重建博客时，真的是不嫌麻烦各种折腾，有时候能为了一个页面细节折腾一整天。</p><p>一开始建博客的时候，心里是想着要给别人看的<code>其实一开始也想着以后再需要用到时，回过头来看看,也是见证自己的一个成长</code>，所以在5月份博客建的差不多的时候就开始疯狂向百度提收录，慢慢的到了六月，才明白博客更多的是给自己看的，因为我这里目前写的更多的是技术类文章，一般没需要是不会来看的。所以我也准备多发生活类文章，技术类文章少发，并且只发精髓。</p><p>今天突然发现有一个<a href="https://www.foreverblog.cn/" target="_blank" rel="noopener">十年之约</a>的一个项目，才发现原来有这么多人一起坚持着写文，更文，并且关注其他人的博客。非常喜欢这个平台，也非常感谢有这个平台。让我感觉到了其实我并不孤单。加油，让我们约定一起走过一个又一个的十年之约。</p><blockquote><p>2020年6月15日晚23点申请加入<a href="https://www.foreverblog.cn/" target="_blank" rel="noopener">十年之约项目</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      今天在逛别人的博客时发现了十年之约这个由众多博主发起的一个持续更新博客的十年以上的项目 “十年之约”。在这个短视频迅速发展的时代，以文字为主的博客内容是越来越不受关注了。
    
    </summary>
    
    
      <category term="杂文" scheme="https://colsrch.top/categories/%E6%9D%82%E6%96%87/"/>
    
    
      <category term="杂文" scheme="https://colsrch.top/tags/%E6%9D%82%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>C语言神秘程序</title>
    <link href="https://colsrch.top/posts/986192a4/"/>
    <id>https://colsrch.top/posts/986192a4/</id>
    <published>2020-05-31T03:33:02.000Z</published>
    <updated>2020-07-15T10:55:28.358Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一个可以打印出歌词的神秘程序</p></blockquote><a id="more"></a><p>不管你相信与否，它打印出歌曲 <code>The Twelve Days of Christmas</code> 的歌词，这个程序由 <code>Cambridge Consultants Ltd.</code> 的 <code>Ian Phillipps</code> 编写，用于参加国际C混乱代码大赛(International Obfuscated C Code Contest, 参见 <a href="http://reality.sgi.com/csp/ioccc" target="_blank" rel="noopener">http://reality.sgi.com/csp/ioccc</a> )。</p><p>程序源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">main(t, _, a)</span><br><span class="line"><span class="keyword">char</span>* a;</span><br><span class="line">&#123;<span class="keyword">return</span>!<span class="number">0</span> &lt; t ? t &lt; <span class="number">3</span> ? main(<span class="number">-79</span>, <span class="number">-13</span>, a + main(<span class="number">-87</span>, <span class="number">1</span> - _,</span><br><span class="line">main(<span class="number">-86</span>, <span class="number">0</span>, a + <span class="number">1</span>) + a)) : <span class="number">1</span>, t &lt; _ ? main(t + <span class="number">1</span>, _, a) : <span class="number">3</span>, main(<span class="number">-94</span>, <span class="number">-27</span> + t, a</span><br><span class="line">) &amp;&amp; t == <span class="number">2</span> ? _ &lt; <span class="number">13</span> ? main(<span class="number">2</span>, _ + <span class="number">1</span>, <span class="string">"%s %d %d\n"</span>) : <span class="number">9</span> : <span class="number">16</span> : t &lt; <span class="number">0</span> ? t &lt; <span class="number">-72</span> ? main(_,</span><br><span class="line">t, <span class="string">"@n'+,#'/*&#123;&#125;w+/w#cdnr/+,&#123;&#125;r/*de&#125;+,/*&#123;*+,/w&#123;%+,/w#q#n+,/#&#123;l,+,/n&#123;n+\</span></span><br><span class="line"><span class="string">,/+#n+,/#;#q#n+,/+k#;*+,/'r :'d*'3,&#125;&#123;w+K w'K:'+&#125;e#';dq#'l q#'+d'K#!/\</span></span><br><span class="line"><span class="string">+k#;q#'r&#125;eKK#&#125;w'r&#125;eKK&#123;nl]'/#;#q#n')&#123;)#&#125;w')&#123;)&#123;nl]'/+#n';d&#125;rw' i;# )&#123;n\</span></span><br><span class="line"><span class="string">l]!/n&#123;n#'; r&#123;#w'r nc&#123;nl]'/#&#123;l,+'K &#123;rw' iK&#123;;[&#123;nl]'/w#q#\</span></span><br><span class="line"><span class="string">n'wk nw' iwk&#123;KK&#123;nl]!/w&#123;%'l##w#' i; :&#123;nl]'/*&#123;q#'ld;r'&#125;&#123;nlwb!/*de&#125;'c \</span></span><br><span class="line"><span class="string">;;&#123;nl'-&#123;&#125;rw]'/+,&#125;##'*&#125;#nc,',#nw]'/+kd'+e&#125;+;\</span></span><br><span class="line"><span class="string">#'rdq#w! nr'/ ') &#125;+&#125;&#123;rl#'&#123;n' ')# &#125;'+&#125;##(!!/"</span>)</span><br><span class="line">: t &lt; <span class="number">-50</span> ? _ == *a ? <span class="built_in">putchar</span>(a[<span class="number">31</span>]) : main(<span class="number">-65</span>, _, a + <span class="number">1</span>) : main((*a == <span class="string">'/'</span>) + t, _, a\</span><br><span class="line">+ <span class="number">1</span>) : <span class="number">0</span> &lt; t ? main(<span class="number">2</span>, <span class="number">2</span>, <span class="string">"%s"</span>) : *a == <span class="string">'/'</span> || main(<span class="number">0</span>, main(<span class="number">-61</span>, *a, <span class="string">"!ek;dc \</span></span><br><span class="line"><span class="string">i@bK'(q)-[w]*%n+r3#l,&#123;&#125;:\nuwloca-O;m .vpbks,fxntdCeghiry"</span>), a + <span class="number">1</span>); &#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>版权© 1988, Landon Curt Noll &amp; Larry Bassel。保留所有权利。</code></p><p>允许个人、教育或非盈利目的使用，但必须完整且不做修改地加上版权声明。其他用户若要使用本程序必须事先征得 <code>Landon Curt Noll</code> 和 <code>Larry Bassel</code> 的书面许可。</p></blockquote>]]></content>
    
    <summary type="html">
    
      不管你相信与否，它打印出歌曲 The Twelve Days of Christmas 的歌词，这个程序由 Cambridge Consultants Ltd. 的 Ian Phillipps 编写，用于参加国际C混乱代码大赛
    
    </summary>
    
    
      <category term="C/C++" scheme="https://colsrch.top/categories/C-C/"/>
    
      <category term="C" scheme="https://colsrch.top/categories/C-C/C/"/>
    
    
      <category term="C/C++" scheme="https://colsrch.top/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>2020新时代，“网络兼职诈骗”是如何骗你的？我亲自去体验下</title>
    <link href="https://colsrch.top/posts/267dfe7a/"/>
    <id>https://colsrch.top/posts/267dfe7a/</id>
    <published>2020-05-27T15:17:29.000Z</published>
    <updated>2020-07-15T10:55:28.358Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2020年，在这个互联网飞速发展的时代，网络诈骗时常出现，那么2020年网络兼职诈骗是怎么骗你的呢？</p></blockquote><a id="more"></a><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>此事为本人亲身经历之事,以下所言句句属实，希望大家不要被骗。</p><hr><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><p>2020年5月27日，突然想到去年那些需要会费的兼职诈骗，于是想看看今年的诈骗是什么样子的，就这样，我在某贴吧的打字员吧中看到现在的兼职都是不要会费的，这让我很好奇，不要会费你拿什么骗钱。因此我便在里面发了一条评论 <code>滴滴</code> ，等待了一会儿的样子，有两个人<strong>同时</strong>加我，并且两人都是精确查找加我，这或许是某吧可以让其他人看到我QQ号。</p><p>由于是在想不出他们怎么赚钱的，于是便加上了他们。</p><p>一开始对方会问你做不做兼职，我们本就是为了兼职而来的，当然说做。</p><p>然后我问他有什么做的，他会一一发给我</p><ul><li>打字员</li><li>流量打字</li><li>其他的我忘了，因为做为一个程序员，我当然选打字😂</li></ul><p>接下来我问了一下需不需要会费，这年头要会费的基本上骗不到钱。他说不需要会费，这时候可能就会有一些人上钩了。</p><p>之后他便问我做不做，然后说免费的需要提供手机号，为了体验这个诈骗是怎么回事，我将手机号提供给他了，之后他便说在排队请等待。</p><p>等了几个小时之后，他来找我说<code>流量打字</code>的做不做，我拿着一般人的思维说做，过了一会他说要我花100元买它50G，然后以10元1G的价格卖出去，他还说保证有人会买，他来提供人买。这不，马脚就漏出来了。</p><blockquote><p>有这么好的事他自己怎么不买来卖，可笑，关键是目前大家使用的基本上都是通信卡，怎么可能有第三方通道给你充流量，大家千万不要上当了!</p></blockquote><p>我们继续与他们交涉。这个时候另一个加我说兼职的人开始说话了，不过这个时候已经不是我第一次和她聊了，前面和这个上面一样，提供手机号码之后她说要验证下有没有冲突。当我这边这个说流量什么的，这个性别是女的骗子就开始与我继续交涉了。</p><p>她说我的手机号冲突了，需要取消另一个兼职。回到性别为男的这一方，我向他提起了取消不做的要求，他说已经注册了什么流量平台，不能取消，除非我做一单，如果不做的话我的微信、支付宝、银行卡、父母的银行卡等都会冻结之类的，简单来说就是吓唬你！并且他会时常说出你的真实姓名中的名，就例如一个人叫张小三，他会叫这个人为小三。</p><p>这个时候大家也不要惊慌，支付宝付款会显示收款方的名，大家去测试下就知道了，对方其实就是通过支付宝付款来知道我的名的。这个我还特地打电话给10086人工客服询问了一下号码被别人知道的能否查看到本人的真实信息，以及是否会影响支付宝微信等功能的使用。结果无疑是不会的。</p><p>对方念出我的名无非就是想吓唬我，可惜了，他面对的并不是普通人。之后他还通过登录我的支付宝及阿里巴巴时的验证码及找回密码验证码来吓唬我。最后他会来一句你的支付宝淘宝微信已经在开始冻结了，好自为之。然后将你删除，另一个人也会说一些话然后将你删除。既然这伙都已经将我删除了，那我也没必要再留着他们，直接反手举报，结果和我算的一样，一封号一禁止加好友。</p><p>注意啊，如果真的如他所言，这些都会冻结受到影响，那他为何不直接猜号码，猜一个打一个，如若接通边说要多少钱，若不给则微信支付宝都会冻结之类的。怎么可能嘛！</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>网络兼职不可信，尤其是上文所述这些，网络上没有什么所谓的小说打字员，什么1000字30元，要真是这样我能干到他们破产。这年头谁会真的傻fufu的一个字一个字给他录上去，不是语音识别就是OCR，谨记！网络上没有什么所谓的小说打字员，没有这么好的事给你，天上不会掉馅饼。</p><p>仅凭一手机号是什么都不能干的，大家如若收到可疑或并非自己操作的验证码，立刻将短信删除，并不予理睬。现在是法治社会，QQ微信等软件都是需要验证码、人脸等可以证明自己是本人的工具来验证、改密、换绑。也不用担心往朋友圈发布自己的照片别人可修改你QQ、微信等密码，这种都是需要眨眼才可验证成功。</p><p>遇事勿惊慌，如若自己不知道该怎么办可询问他们帮助，遇到问题第一时间与相关人员、公司联系！</p>]]></content>
    
    <summary type="html">
    
      2020年，在这个互联网飞速发展的时代，网络诈骗时常出现，那么2020年网络兼职诈骗是怎么骗你的呢？
    
    </summary>
    
    
      <category term="杂文" scheme="https://colsrch.top/categories/%E6%9D%82%E6%96%87/"/>
    
    
      <category term="杂文" scheme="https://colsrch.top/tags/%E6%9D%82%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>VS2019及其他版本序列号及下载地址</title>
    <link href="https://colsrch.top/posts/5fe8cd16/"/>
    <id>https://colsrch.top/posts/5fe8cd16/</id>
    <published>2020-05-13T14:39:10.000Z</published>
    <updated>2020-07-15T10:55:28.358Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>VS各版本的序列号百度基本都能找到，因此这里写的这一篇主要是为了自己将来要用到时方便寻找</p></blockquote><a id="more"></a><h2 id="序列号"><a href="#序列号" class="headerlink" title="序列号"></a>序列号</h2><h3 id="Visual-Studio-2019"><a href="#Visual-Studio-2019" class="headerlink" title="Visual Studio 2019"></a>Visual Studio 2019</h3><p><strong>Enterprise(企业版)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BF8Y8-GN2QH-T84XB-QVY3B-RC4DF</span><br></pre></td></tr></table></figure><p><strong>Professional(专业版)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NYWVH-HT4XC-R2WYW-9Y3CM-X4V3Y</span><br></pre></td></tr></table></figure><h3 id="Visual-Studio-2017"><a href="#Visual-Studio-2017" class="headerlink" title="Visual Studio 2017"></a>Visual Studio 2017</h3><p><strong>企业版</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NJVYC-BMHX2-G77MM-4XJMR-6Q8QF</span><br></pre></td></tr></table></figure><p><strong>专业版</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KBJFW-NXHK6-W4WJM-CRMQB-G3CDH</span><br></pre></td></tr></table></figure><h3 id="Visual-Studio-2015"><a href="#Visual-Studio-2015" class="headerlink" title="Visual Studio 2015"></a>Visual Studio 2015</h3><p><strong>企业版</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HM6NR-QXX7C-DFW2Y-8B82K-WTYJV</span><br></pre></td></tr></table></figure><p><strong>专业版</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HMGNV-WCYXV-X7G9W-YCX63-B98R2</span><br></pre></td></tr></table></figure><h3 id="Visual-Studio-2013"><a href="#Visual-Studio-2013" class="headerlink" title="Visual Studio 2013"></a>Visual Studio 2013</h3><p><strong>Ultimate</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BWG7X-J98B3-W34RT-33B3R-JVYW9</span><br></pre></td></tr></table></figure><p><strong>Premium</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FBJVC-3CMTX-D8DVP-RTQCT-92494</span><br></pre></td></tr></table></figure><p><strong>Professional</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XDM3T-W3T3V-MGJWK-8BFVD-GVPKY</span><br></pre></td></tr></table></figure><p><strong>Team Foundation Server 2013</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MHG9J-HHHX9-WWPQP-D8T7H-7KCQG</span><br></pre></td></tr></table></figure><h3 id="Visual-Studio-2012"><a href="#Visual-Studio-2012" class="headerlink" title="Visual Studio 2012"></a>Visual Studio 2012</h3><p><strong>ULT_chs</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RBCXF-CVBGR-382MK-DFHJ4-C69G8</span><br></pre></td></tr></table></figure><blockquote><p>VS各版本之间都是独立的，可以共存（因此在安装一个VS版本时无需卸载其他的版本）</p></blockquote><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><h3 id="Visual-Studio-2019-1"><a href="#Visual-Studio-2019-1" class="headerlink" title="Visual Studio 2019"></a>Visual Studio 2019</h3><p><code>Visual Studio 2019</code>：<a href="https://visualstudio.microsoft.com/zh-hans/downloads/" target="_blank" rel="noopener">https://visualstudio.microsoft.com/zh-hans/downloads/</a></p><h3 id="下载旧版本"><a href="#下载旧版本" class="headerlink" title="下载旧版本"></a>下载旧版本</h3><p><a href="https://visualstudio.microsoft.com/zh-hans/vs/older-downloads/" target="_blank" rel="noopener">Visual Studio 较旧版本下载</a>：<a href="https://visualstudio.microsoft.com/zh-hans/vs/older-downloads/" target="_blank" rel="noopener">https://visualstudio.microsoft.com/zh-hans/vs/older-downloads/</a></p><blockquote><p>建议下载<code>Visual Studio 2019 Enterprise</code>企业版，密钥在文章开头</p></blockquote>]]></content>
    
    <summary type="html">
    
      VS各版本的序列号百度基本都能找到，因此这里写的这一篇主要是为了自己将来要用到时方便寻找
    
    </summary>
    
    
      <category term="Visual Studio" scheme="https://colsrch.top/categories/Visual-Studio/"/>
    
    
      <category term="Visual Studio" scheme="https://colsrch.top/tags/Visual-Studio/"/>
    
  </entry>
  
  <entry>
    <title>LeanCLoud定时唤醒失败的解决方案（持续更新）</title>
    <link href="https://colsrch.top/posts/da1d5c8b/"/>
    <id>https://colsrch.top/posts/da1d5c8b/</id>
    <published>2020-05-13T06:42:23.000Z</published>
    <updated>2020-07-15T10:55:28.358Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本篇来说一下最近常发生的<code>因流控原因，通过定时任务唤醒体验版实例失败，建议升级至标准版云引擎实例避免休眠</code>问题（持续更新）</p></blockquote><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>相信大家最近都遇到下图这个问题吧</p><p><img src="https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/AAA11.png" alt="AAA11.png"></p><blockquote><p>因流控原因，通过定时任务唤醒体验版实例失败，建议升级至标准版云引擎实例避免休眠</p></blockquote><p><strong>我们来看看官方说明</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/AAA12.png" alt="AAA12.png"></p><p><a href="https://forum.leancloud.cn/t/topic/22595" target="_blank" rel="noopener">关于对体验版云引擎定时任务进行适当流控的说明</a></p><hr><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><blockquote><p>完美解决方案：GitHub+Actions解决</p><blockquote><p>解决方案作者：Dreamy.TZK<br>原文章：<a href="https://www.antmoe.com/posts/ff6aef7b/" target="_blank" rel="noopener">https://www.antmoe.com/posts/ff6aef7b/</a></p></blockquote></blockquote><ol><li><p>鼠标放在右上角，选择 setting<br><img src="https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/14/a81f88e80fd7105d7cc3e1844970e8bd.png" alt="setting.png"></p></li><li><p>点击<code>Developer settings</code><br><img src="https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/14/66df62fbc0d51403fcdc8223c4b6ce52.png" alt="developer.png"></p></li><li><p>打开Github，新建一个TOKEN。</p><ul><li>设置名字为 GITHUB_TOKEN</li><li>勾选 repo、admin:repo_hook、workflow 等选项</li><li>点击 Generate token 即可。<br>这个 TOKEN 主要使用来启动 actions 和上传结果用的。</li></ul></li></ol><details green><summary> <p>查看GITHUB_TOKEN勾选示意图</p> </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/15/23ee2808dce8dab17e06107d1ddaf5d6.png" alt="GITHUB_TOKEN.png"></p>              </div>            </details><p><strong>TOKEN名字必须使用<code>GITHUB_TOKEN</code></strong></p><ol start="4"><li><p>接下来 FORK 项目。<br>地址：<a href="https://github.com/blogimg/WakeLeanCloud" target="_blank" rel="noopener">https://github.com/blogimg/WakeLeanCloud</a><br>如果觉得好用可以给<a href="https://www.antmoe.com/" target="_blank" rel="noopener">作者</a>点个赞哦！</p></li><li><p>成功 FORK 后，进入项目的设置。添加你的 leancloud 的后台地址（也就是评论管理的后台地址）</p><p><img src="https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/14/d15b1fffb681f0dd3b9264ea878bf055.png" alt="fork.png"></p><p>选择 Secrets，添加你的地址</p><p><img src="https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/14/6c2cd1845116e3d4e4147157d334be19.png" alt="secrets.png"></p><p><img src="https://cdn.jsdelivr.net/gh/blogimg/picbed@latest/2020/05/14/caed66e8408e5a0c91fe446951180f8d.png" alt="SITE.png"></p><p><strong>其中 Name 的名字必须为<code>SITE</code>，Value 可以是多个地址，用英文半角逗号分隔。不要中文全角逗号！！！</strong></p></li><li><p>接下来对自己的项目点个 star 就能启动了，启动后请切换到 actions，看看是否运行成功。</p><ul><li>成功<br>那么你就可以关掉了，默认是每天 8:00-24:00 时每 20 分钟运行一次。(GitHub 时间稍有延迟，大概时 2-5 分钟。）</li><li>失败<br>请认真看本教程。</li></ul></li></ol><blockquote><p>自己点自己的项目是手动执行一次 actions。是为了测试<a href="https://www.antmoe.com" target="_blank" rel="noopener">作者</a>才设计这个功能的哦！<br>并不是不点星这个 actions 就不会运行。</p></blockquote><ol start="7"><li>最后，如果觉得好用，请给<a href="https://www.antmoe.com" target="_blank" rel="noopener">作者</a>点个 star 哦！</li></ol><blockquote><p>若想得到更详细的解决方法，请前往该方案原文章：<a href="https://www.antmoe.com/posts/ff6aef7b/" target="_blank" rel="noopener">https://www.antmoe.com/posts/ff6aef7b/</a><br>请多支持作者：Dreamy.TZK<br>本解决方案转载自：<a href="https://www.antmoe.com/" target="_blank" rel="noopener">小康博客</a>：<a href="https://www.antmoe.com/" target="_blank" rel="noopener">https://www.antmoe.com/</a></p></blockquote><hr><h2 id="事件记录"><a href="#事件记录" class="headerlink" title="事件记录"></a>事件记录</h2><ul><li>2020/05/12<br>发现LeanCloud流控问题，通过重启实例得以解决。</li><li>2020/05/13<br>13号早上7点唤醒实例时失败，重启实例不成功，修改唤醒时间和频率得以解决。</li><li>2020/05/14<br>定时任务执行正常</li><li>2020/05/15<br>自唤醒失败，重启实例+修改定时函数得以解决</li><li>2020/05/16<br>解决方法更换为小康给出的方案</li></ul>]]></content>
    
    <summary type="html">
    
      本篇来说一下最近常发生的因流控原因，通过定时任务唤醒体验版实例失败，建议升级至标准版云引擎实例避免休眠问题（持续更新）
    
    </summary>
    
    
      <category term="Hexo" scheme="https://colsrch.top/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://colsrch.top/tags/Hexo/"/>
    
      <category term="LeanCloud" scheme="https://colsrch.top/tags/LeanCloud/"/>
    
  </entry>
  
  <entry>
    <title>Coding+Hexo实现自动化部署</title>
    <link href="https://colsrch.top/posts/d4fe038d/"/>
    <id>https://colsrch.top/posts/d4fe038d/</id>
    <published>2020-05-12T10:18:49.000Z</published>
    <updated>2020-07-15T10:55:28.358Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本篇记录下如何使用Coding+Hexo实现自动化部署，因为本地部署耗时较为严重，特别是在换电脑后，需要重新安装一大堆，才能部署。</p></blockquote><a id="more"></a><h3 id="新建访问令牌"><a href="#新建访问令牌" class="headerlink" title="新建访问令牌"></a>新建访问令牌</h3><p>首先我们需要新建一个访问令牌，用来访问仓库代码</p><p><strong>1.打开个人设置</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/AAA01.png" alt="AAA01.png"></p><p><strong>2.选择访问令牌</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/AAA02.png" alt="AAA02.png"></p><p><strong>3.新建令牌</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/AAA03.png" alt="AAA03.png"></p><p>输入描述，勾选第一个<code>project:depot</code>，并新建</p><p><img src="https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/AAA04.png" alt="AAA04.png"></p><p><strong>复制令牌密码，该密码只会出现一次</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/AAA05.png" alt="AAA05.png"></p><h3 id="编写构建计划"><a href="#编写构建计划" class="headerlink" title="编写构建计划"></a>编写构建计划</h3><p>打开项目，复制好hexo源码的仓库https地址，后面要用。</p><p><strong>新建构建计划</strong></p><p>打开持续集成中的构建计划，我们选择<code>新建构建计划配置</code></p><p><img src="https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/AAA06.png" alt="AAA06.png"></p><p><img src="https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/AAA07.png" alt="AAA07.png"></p><ul><li>输入计划名称</li><li>选择代码源为Coding</li><li>选择Hexo源文件所在的代码仓库</li><li>选择<code>使用静态配置的 Jenkinsfile</code>，选择<code>自定义构建过程</code></li><li>勾选前往配置详情，并确定。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/AAA08.png" alt="AAA08.png"></p><p>选择文本编辑器，将一下代码复制进去，别忘了修改你自己的git地址。注意<code>sh &#39;git clone https://账号:密码@地址 .&#39;</code>中的<code>.</code>千万别删除，删除可能会导致发布不成功（虽然提示成功）</p><details green><summary> <p>查看配置代码</p> </summary>              <div class='content'>              <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">  agent any</span><br><span class="line">  stages &#123;</span><br><span class="line">    stage(<span class="string">'克隆项目'</span>) &#123;</span><br><span class="line">      steps &#123;</span><br><span class="line">        sh <span class="string">'git clone https://账号:密码@地址 .'</span></span><br><span class="line">        sh <span class="string">'ls -a'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">'安装依赖'</span>) &#123;</span><br><span class="line">      steps &#123;</span><br><span class="line">        sh <span class="string">'ls -a'</span></span><br><span class="line">        sh <span class="string">'npm install -g hexo-cli'</span></span><br><span class="line">        sh <span class="string">'npm install hexo --save'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">'构建发布'</span>) &#123;</span><br><span class="line">      steps &#123;</span><br><span class="line">        sh <span class="string">'hexo clean &amp;&amp; hexo g &amp;&amp; hexo d'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><p>然后我们点击右上角的保存</p><h3 id="修改触发规则"><a href="#修改触发规则" class="headerlink" title="修改触发规则"></a>修改触发规则</h3><p>我们修改一下构建的触发规则为<code>当推送到hexo源码的仓库分支时构建</code>，保存修改就可以。</p><h3 id="修改hexo根目录配置文件"><a href="#修改hexo根目录配置文件" class="headerlink" title="修改hexo根目录配置文件"></a>修改hexo根目录配置文件</h3><p>我们做完前面的还需要配置一下hexo根目录的配置文件中的git地址</p><p>打个比方（Coding和Github通用）：</p><ul><li>令牌用户名为：Admin</li><li>令牌密码为：abcdefg123456</li><li>项目地址是：</li><li><ul><li><a href="https://e.coding.net/test/test.git" target="_blank" rel="noopener">https://e.coding.net/test/test.git</a></li></ul></li></ul><p>那么配置文件中的地址就是：</p><ul><li>Coding：<a href="https://Admin:abcdefg123456@e.coding.net/test/test.git" target="_blank" rel="noopener">https://Admin:abcdefg123456@e.coding.net/test/test.git</a></li></ul><p><strong>Github同理，也需要先申请Github`中的项目令牌</strong></p><h3 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h3><p>做好这些我们来上传试试</p><p><img src="https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/AAA09.png" alt="AAA09.png"></p><p>可以看到已经在构建了</p><p><img src="https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/AAA10.png" alt="AAA10.png"></p><p>构建成功！</p><h3 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h3><ol><li>请确保您的pages项目仓库是公开的，否则请同样配置访问密钥，并修改hexo根目录下的配置文件。</li><li>Coding的持续集成，每周构建次数是200次，每次30分钟，每周一重置次数</li></ol>]]></content>
    
    <summary type="html">
    
      本篇记录下如何使用Coding+Hexo实现自动化部署，因为本地部署耗时较为严重，特别是在换电脑后，需要重新安装一大堆，才能部署。
    
    </summary>
    
    
      <category term="Hexo" scheme="https://colsrch.top/categories/Hexo/"/>
    
    
      <category term="Coding" scheme="https://colsrch.top/tags/Coding/"/>
    
      <category term="Hexo" scheme="https://colsrch.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>利用腾讯Cloud Studio云端使用hexo</title>
    <link href="https://colsrch.top/posts/5f073d29/"/>
    <id>https://colsrch.top/posts/5f073d29/</id>
    <published>2020-04-30T05:28:12.000Z</published>
    <updated>2020-07-15T10:55:28.358Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本篇介绍hexo如何在云端部署，它可以让您无需电脑，无需安装Git、nodejs等便可编写hexo文章并配置hexo。你在本地可以做的操作，云端都可以做到</p></blockquote><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>大家都有过这样的经历吧，当你想要写文章或者想要配置hexo时，因为手上暂时没有电脑等原因，只能先咕在这，过了一段时间，可能我们都忘记了想要写什么了。</p><p>于是我发现了这个<code>腾讯 Cloud Studio</code>，并且它可以和Coding配合使用。这也就代表着将博客及源码放置在Coding仓库中，便可以利用<code>Cloud Studio</code>进行配置编写了。</p><hr><h2 id="配置-Cloud-Studio"><a href="#配置-Cloud-Studio" class="headerlink" title="配置 Cloud Studio"></a>配置 Cloud Studio</h2><p>首先你需要有一个Coding团队，具体方法在这里就不细说了，百度上有很多很好的教程。</p><h3 id="1、打开Cloud-Studio"><a href="#1、打开Cloud-Studio" class="headerlink" title="1、打开Cloud Studio"></a>1、打开Cloud Studio</h3><p><img src="https://cdn.jsdelivr.net/gh/Colsrch/images@V1.1/Colsrch/JbH2EF.png" alt="JbH2EF.png"></p><p><strong>我们会看到如下图所示的界面</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Colsrch/images@V1.1/Colsrch/JbbiVS.png" alt="JbbiVS.png"></p><hr><h3 id="2、配置SSH公钥"><a href="#2、配置SSH公钥" class="headerlink" title="2、配置SSH公钥"></a>2、配置SSH公钥</h3><p>打开Cloud Studio之后我们需要配置一下SSH公钥</p><p>我们点开设置</p><p><img src="https://cdn.jsdelivr.net/gh/Colsrch/images@V1.1/Colsrch/JbbQVU.png" alt="JbbQVU.png"></p><p>复制右边所示的SSH公钥，然后在Coding个人设置的SSH公钥中，添加密钥</p><p><img src="https://cdn.jsdelivr.net/gh/Colsrch/images@V1.1/Colsrch/Jbb4Ig.png" alt="Jbb4Ig.png"></p><blockquote><p>记得勾选永久有效哦</p></blockquote><hr><h2 id="创建工作空间"><a href="#创建工作空间" class="headerlink" title="创建工作空间"></a>创建工作空间</h2><p>配置好了<code>Cloud Studio</code>之后，我们便创建一个<code>工作空间</code>，默认会有一个<code>演示工作空间</code>，我们将其删除便可</p><p><img src="https://cdn.jsdelivr.net/gh/Colsrch/images@V1.1/Colsrch/Jbq9zR.png" alt="Jbq9zR.png"></p><blockquote><p>需要输入<code>工作空间名称</code>，选择运行环境为<code>预置环境</code>下的<code>Node.js</code>,并输入hexo仓库SSH链接</p><p>选择<code>Node.js</code>可以让我们免去安装<code>Node.js</code>的过程，同时，<code>Cloud Studio</code>自带<code>Git</code></p></blockquote><p><strong>创建完成后入下图所示</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Colsrch/images@V1.1/Colsrch/JbqDmV.png" alt="JbqDmV.png"></p><hr><p>我们单击它打开该工作空间</p><p><img src="https://cdn.jsdelivr.net/gh/Colsrch/images@V1.1/Colsrch/JbqhOx.png" alt="JbqhOx.png"></p><p>我们等待其加载完后便可</p><blockquote><p>注意：由于预置环境每天只允许使用4个小时，因此当您关闭工作空间时，记得点击停止运行</p></blockquote><p><strong>熟悉的页面布局映入眼帘</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Colsrch/images@V1.1/Colsrch/JbqxnP.png" alt="JbqxnP.png"></p><p>你没看错，这就是<code>Cloud Studio</code>工作空间内的样子，是不是想到了<code>VS code</code></p><hr><h2 id="配置hexo"><a href="#配置hexo" class="headerlink" title="配置hexo"></a>配置hexo</h2><p>还记得我写的多终端配置hexo吗，就是上一篇</p><p>没错，在这里我们也需要配置一番</p><hr><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>由于已经内置了<code>Git</code>和<code>Node.js</code>，因此我们只需要安装<code>hexo</code>即可</p><blockquote><p>我们在终端输入以下命令，包括之后的一切命令都是在终端输入，这个貌似也不用我说</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>接下来运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Colsrch/images@V1.1/Colsrch/JbO9Dx.png" alt="JbO9Dx.png"></p><p>然后就可以按照平时的使用来了！</p><hr><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><ul><li>hexo常用指令可以前往我的上一篇文章中查看</li><li>不要忘了配置git的user.email和user.name哦<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"username"</span></span><br><span class="line">git config --global user.email <span class="string">"user@email.com"</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>既然都看到这里了，留下个评论代表你来过好不好</p></blockquote>]]></content>
    
    <summary type="html">
    
      本篇介绍hexo如何在云端部署，它可以让您无需电脑，无需安装Git、nodejs等便可编写hexo文章并配置hexo。你在本地可以做的操作，云端都可以做到
    
    </summary>
    
    
      <category term="Hexo" scheme="https://colsrch.top/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://colsrch.top/tags/Hexo/"/>
    
      <category term="Cloud Studio" scheme="https://colsrch.top/tags/Cloud-Studio/"/>
    
  </entry>
  
  <entry>
    <title>Hexo常用指令</title>
    <link href="https://colsrch.top/posts/a5b8d333/"/>
    <id>https://colsrch.top/posts/a5b8d333/</id>
    <published>2020-04-18T14:23:54.000Z</published>
    <updated>2020-07-15T10:55:28.358Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇仅介绍Hexo常用指令及Hexo博客搭建过程中使用的命令，需要完整教程请转至上篇<a href="/2020/04/18/hexo-help/">Hexo博客搭建教程（全）</a></p><a id="more"></a><hr><h2 id="Hexo搭建（仅命令）"><a href="#Hexo搭建（仅命令）" class="headerlink" title="Hexo搭建（仅命令）"></a>Hexo搭建（仅命令）</h2><h3 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h3><ul><li>安装GIt</li><li>安装Nodejs</li></ul><p><strong>检查配置是否成功</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><ul><li>安装cnpm</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p><strong>检查cnpm是否安装成功</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm -v</span><br></pre></td></tr></table></figure><ul><li>安装hexo</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install hexo-cli -g</span><br></pre></td></tr></table></figure><hr><h3 id="2、初始化博客"><a href="#2、初始化博客" class="headerlink" title="2、初始化博客"></a>2、初始化博客</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>若在<code>Install dependencies</code>卡住则执行<code>Ctrl + C</code>结束命令</p><p><strong>使用国内的镜像完成博客的初始化工作</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install</span><br></pre></td></tr></table></figure><hr><h3 id="3、配置主题"><a href="#3、配置主题" class="headerlink" title="3、配置主题"></a>3、配置主题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> 复制的地址 themes/主题名字</span><br></pre></td></tr></table></figure><p><strong>修改配置文件</strong></p><p>打开博客根目录的<code>_config.yml</code>文件，找到<code>theme</code>这一行，修改主题名字</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure><hr><h3 id="4、上传"><a href="#4、上传" class="headerlink" title="4、上传"></a>4、上传</h3><blockquote><p>请先配置Git的SSH等信息</p></blockquote><p><strong>安装上传插件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p><strong>上传</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><hr><h3 id="5、配置多终端工作"><a href="#5、配置多终端工作" class="headerlink" title="5、配置多终端工作"></a>5、配置多终端工作</h3><p>先在仓库中新建一个hexo分支，并设置默认分支为hexo（这样每次同步的时候就不用指定分支，比较方便）。</p><ol><li>克隆hexo分支</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@e.coding.net:eawakeofi/Colsrch/Colsrch.git</span><br></pre></td></tr></table></figure><ol start="2"><li>克隆到本地的Coding中，把除了.git 文件夹外的所有文件都删掉</li><li>把之前我们写的博客源文件全部复制过来，除了.deploy_git</li></ol><p>这里应该说一句，复制过来的源文件应该有一个.gitignore，用来忽略一些不需要的文件，如果没有的话，自己新建一个，在里面写上如下，表示这些类型文件不需要git：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules&#x2F;</span><br><span class="line">public&#x2F;</span><br><span class="line">.deploy*&#x2F;</span><br></pre></td></tr></table></figure><p><strong>注意，如果你之前克隆过theme中的主题文件，那么应该把主题文件中的<code>.git</code>文件夹删掉，因为git不能嵌套上传，最好是显示隐藏文件，检查一下有没有，否则上传的时候会出错，导致你的主题文件无法上传，这样你的配置在别的电脑上就用不了了。</strong></p><ol start="4"><li>上传</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add -A</span><br><span class="line">git commit –m <span class="string">"add branch"</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><hr><h3 id="6、更换电脑使用"><a href="#6、更换电脑使用" class="headerlink" title="6、更换电脑使用"></a>6、更换电脑使用</h3><p>一样的，跟之前的环境搭建一样，</p><ul><li><p>安装git</p><ul><li>设置git全局邮箱和用户名</li><li>设置ssh key</li></ul></li><li><p>安装nodejs</p></li><li><p>安装hexo</p><blockquote><p>但是已经不需要初始化了</p></blockquote></li></ul><p>直接在任意文件夹下，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@………………</span><br></pre></td></tr></table></figure><p>然后进入克隆到的文件夹：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>生成，部署：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>然后就可以开始写你的新博客了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"文章名"</span></span><br></pre></td></tr></table></figure><p>Tips:</p><p>不要忘了，每次写完最好都把源文件上传一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add -A</span><br><span class="line">git commit -m <span class="string">"xxx"</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>如果是在已经编辑过的电脑上，已经有clone文件夹了，那么，每次只要和远端同步一下就行了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><hr><h3 id="7、国内外分流"><a href="#7、国内外分流" class="headerlink" title="7、国内外分流"></a>7、国内外分流</h3><p>具体方法请查看上篇，这里只给出<code>_config.yml</code>的修改</p><p>hexo官方文档是这样的：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">[message]</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">    <span class="attr">github:</span> <span class="string">&lt;repository</span> <span class="string">url&gt;,[branch]</span></span><br><span class="line">    <span class="attr">coding:</span> <span class="string">&lt;repository</span> <span class="string">url&gt;,[branch]</span></span><br></pre></td></tr></table></figure><p>那么，我们只需要：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> </span><br><span class="line">    <span class="attr">coding:</span> <span class="string">git@e.coding.net:eawakeofi/Colsrch/Colsrch.git,master</span></span><br><span class="line">    <span class="attr">github:</span> <span class="string">git@github.com:1332925715/1332925715.github.io.git,master</span></span><br></pre></td></tr></table></figure><p><strong>之后直接部署</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><hr><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><blockquote><p>转自Hexo中文站</p></blockquote><p>你无需全部记住，可以只记住下面几个常用的,具体作用可以<code>点击对应命令</code>跳转到其用法</p><table><thead><tr><th align="center">命令</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><a href="#init">init</a></td><td align="center">初始化博客</td></tr><tr><td align="center"><a href="#new">new</a></td><td align="center">新建文章</td></tr><tr><td align="center"><a href="#generate">generate</a></td><td align="center">生成静态文件</td></tr><tr><td align="center"><a href="#server">server</a></td><td align="center">本地预览</td></tr><tr><td align="center"><a href="#deploy">deploy</a></td><td align="center">部署博客</td></tr><tr><td align="center"><a href="#clean">clean</a></td><td align="center">清理缓存</td></tr></tbody></table><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init [folder]</span><br></pre></td></tr></table></figure><p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p><h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href="https://www.hexocn.cn/docscn/configuration.html" target="_blank" rel="noopener">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"post title with whitespace"</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>-p</code>, <code>--path</code></td><td>自定义新文章的路径</td></tr><tr><td><code>-r</code>, <code>--replace</code></td><td>如果存在同名文章，将其替换</td></tr><tr><td><code>-s</code>, <code>--slug</code></td><td>文章的 Slug，作为新文章的文件名和发布后的 URL</td></tr></tbody></table><p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 <code>index.md</code> 文件。你可以使用 <code>--path</code> 参数来覆盖上述行为、自行决定文件的目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page --path about/me <span class="string">"About me"</span></span><br></pre></td></tr></table></figure><p>以上命令会创建一个 <code>source/about/me.md</code> 文件，同时 Front Matter 中的 title 为 <code>&quot;About me&quot;</code></p><p>注意！title 是必须指定的！如果你这么做并不能达到你的目的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page --path about/me</span><br></pre></td></tr></table></figure><p>此时 Hexo 会创建 <code>source/_posts/about/me.md</code>，同时 <code>me.md</code> 的 Front Matter 中的 title 为 <code>&quot;page&quot;</code>。这是因为在上述命令中，hexo-cli 将 <code>page</code> 视为指定文章的标题、并采用默认的 <code>layout</code>。</p><p><strong>创建草稿</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new draft <span class="string">"new draft"</span></span><br></pre></td></tr></table></figure><p>会在source/_drafts目录下生成一个new-draft.md文件。但是这个文件不被显示在页面上，链接也访问不到。也就是说如果你想把某一篇文章移除显示，又不舍得删除，可以把它移动到_drafts目录之中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//如果你希望强行预览草稿，更改配置文件：</span><br><span class="line">render_drafts: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">//或者，如下方式启动server：</span><br><span class="line">hexo server --drafts</span><br></pre></td></tr></table></figure><p><strong>发布草稿的指令：<a href="#publish">publish</a></strong></p><h3 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>生成静态文件。</p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>-d</code>, <code>--deploy</code></td><td>文件生成后立即部署网站</td></tr><tr><td><code>-w</code>, <code>--watch</code></td><td>监视文件变动</td></tr><tr><td><code>-b</code>, <code>--bail</code></td><td>生成过程中如果发生任何未处理的异常则抛出异常</td></tr><tr><td><code>-f</code>, <code>--force</code></td><td>强制重新生成文件 Hexo 引入了差分机制，如果 <code>public</code> 目录存在，那么 <code>hexo g</code> 只会重新生成改动的文件。 使用该参数的效果接近 <code>hexo clean &amp;&amp; hexo generate</code></td></tr><tr><td><code>-c</code>, <code>--concurrency</code></td><td>最大同时生成文件的数量，默认无限制</td></tr></tbody></table><p>该命令可以简写为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><h3 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure><p>发表草稿。</p><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>-p</code>, <code>--port</code></td><td>重设端口</td></tr><tr><td><code>-s</code>, <code>--static</code></td><td>只使用静态文件</td></tr><tr><td><code>-l</code>, <code>--log</code></td><td>启动日记记录，使用覆盖记录格式</td></tr></tbody></table><h3 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>部署网站。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>-g</code>, <code>--generate</code></td><td>部署之前预先生成静态文件</td></tr></tbody></table><p>该命令可以简写为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo render &lt;file1&gt; [file2] ...</span><br></pre></td></tr></table></figure><p>渲染文件。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>-o</code>, <code>--output</code></td><td>设置输出路径</td></tr></tbody></table><h3 id="migrate"><a href="#migrate" class="headerlink" title="migrate"></a>migrate</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo migrate &lt;<span class="built_in">type</span>&gt;</span><br></pre></td></tr></table></figure><p>从其他博客系统 <a href="https://www.hexocn.cn/docscn/migration.html" target="_blank" rel="noopener">迁移内容</a>。</p><h3 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo list &lt;<span class="built_in">type</span>&gt;</span><br></pre></td></tr></table></figure><p>列出网站资料。</p><h3 id="version"><a href="#version" class="headerlink" title="version"></a>version</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo version</span><br></pre></td></tr></table></figure><p>显示 Hexo 版本</p>]]></content>
    
    <summary type="html">
    
      本篇仅介绍Hexo常用指令及Hexo博客搭建过程中使用的命令，需要完整教程请转至上篇Hexo博客搭建教程（全）
    
    </summary>
    
    
      <category term="Hexo" scheme="https://colsrch.top/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://colsrch.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客搭建教程（全）</title>
    <link href="https://colsrch.top/posts/454fe87a/"/>
    <id>https://colsrch.top/posts/454fe87a/</id>
    <published>2020-04-18T05:21:06.000Z</published>
    <updated>2020-07-15T10:55:28.358Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h2><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo官网</a>进行详细查看，因为Hexo的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</p><a id="more"></a><h2 id="Hexo搭建步骤"><a href="#Hexo搭建步骤" class="headerlink" title="Hexo搭建步骤"></a>Hexo搭建步骤</h2><ol><li>安装Git</li><li>安装Node.js</li><li>安装cnpm</li><li>安装Hexo</li><li>生成SSH添加到Coding</li><li>将hexo部署到Coding</li><li>设置个人域名</li><li>发布文章</li><li>配置多终端工作</li></ol><hr><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><blockquote><p>下载地址：<a href="https://git-scm.com/" target="_blank" rel="noopener">https://git-scm.com/</a></p></blockquote><p>点这里即可下载最新版本，如果你的下载速度比较慢可以选择下面的链接下载</p><blockquote><p><a href="https://www.lanzous.com/i9s7tib" target="_blank" rel="noopener">https://www.lanzous.com/i9s7tib</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/gtd/Snipaste_2020-02-29_08-57-32.png" alt=""></p><p>运行安装包，选择合适的安装位置，然后点Next，后面的安装步骤全部只要点Next就行了，不需要我们多余配置。</p><p><img src="https://i.loli.net/2020/02/29/jqTCDk6YSbwQOVz.png" alt=""></p><hr><h2 id="安装Nodejs"><a href="#安装Nodejs" class="headerlink" title="安装Nodejs"></a>安装Nodejs</h2><blockquote><p>下载地址： <a href="http://nodejs.cn/download/" target="_blank" rel="noopener">http://nodejs.cn/download/</a></p></blockquote><p>选择windows安装包.msi安装，下载完成后运行安装包，我们默认选择c盘，选择Add to PATH然后点Next继续就行了。</p><hr><h3 id="验证nodejs是否安装配置成功"><a href="#验证nodejs是否安装配置成功" class="headerlink" title="验证nodejs是否安装配置成功"></a>验证nodejs是否安装配置成功</h3><p>我们安装完Git后，在桌面右键会有Git Bash Here，我们直接点开</p><p><img src="https://i.loli.net/2020/02/29/s1YhxtEILOlk4Xz.png" alt=""></p><p>会出来一个终端，我们分别执行下面的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>如果输出了版本号，那么证明配置成功，如果没有版本号，请重新安装nodejs（检查是否勾选Add to Path），或者手动为nodejs添加环境变量</p><hr><h2 id="安装cnpm"><a href="#安装cnpm" class="headerlink" title="安装cnpm"></a>安装cnpm</h2><p>在git bash里面执行下面的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p><strong>检查cnpm是否安装成功</strong></p><p>执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm -v</span><br></pre></td></tr></table></figure><p>如果输出版本号就是安装成功了</p><hr><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>在git bash执行下面的命令安装hexo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install hexo-cli -g</span><br></pre></td></tr></table></figure><hr><h2 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a>初始化博客</h2><p>选择一个文件夹，然后右键打开git bash</p><p>例如：我在F盘新建了一个blog文件夹，就在blog文件夹下打开git bash</p><p>然后执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>到<code>Install dependencies</code>的时候你可能会卡住，这是大多数人基本都会遇到的</p><p>我们只需要在这里的时候结束命令，按<code>Ctrl + c</code>就可以结束命令</p><p>然后执行下面这个命令，就可以使用国内的镜像为你完成博客的初始化工作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install</span><br></pre></td></tr></table></figure><blockquote><p>其他方法：</p><p>git clone <a href="https://e.coding.net/huanhao/hexoblog.git" target="_blank" rel="noopener">https://e.coding.net/huanhao/hexoblog.git</a></p><p>cnpm install</p></blockquote><p>然后继续下面的步骤</p><p>等待命令完成后，就完成了初始化，现在就可以预览我们的博客了</p><p>执行下面这个命令</p><p><code>注意：请不要结束命令或者关闭终端</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_09-31-47.jmi628mj35e.png" alt=""></p><p>然后会出来一段http开头的网址，我们复制下来然后在浏览器打开</p><p>就会出现这么一个页面了</p><p><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_09-33-55.tyszma65r9.png" alt=""></p><hr><h2 id="如何下载主题"><a href="#如何下载主题" class="headerlink" title="如何下载主题"></a>如何下载主题</h2><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><p>打开主题的项目地址后，点击<code>Clone or download</code></p><p>然后复制https开头的地址</p><p><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_09-46-02.gnmyl5b7s2.png" alt=""></p><p>然后在你的博客文件夹下面打开git bash</p><p>执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone 复制的地址 themes/主题名字</span><br></pre></td></tr></table></figure><p>如图：</p><p><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_09-50-23.o7ukcdqwa8e.png" alt=""></p><p>现在给你解释一下这个命令</p><p>git clone 代表克隆，后面接上一串下载地址，最后面的themes/next是把文件夹下载到主题目录下，并把主题文件命名为next</p><hr><h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><p>如果你觉得比较麻烦，还有第二个办法</p><p>打开主题项目地址，然后点击<code>Clone or download</code>，然后点击Download ZIP</p><p>这样可以下载主题文件压缩包，前提是你已经登入了github（没有账号的，请自己注册一下）</p><p><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_09-53-14.hd54gibpilh.png" alt=""></p><p>然后解压压缩包，把文件夹放在博客目录下的themes目录，并把文件夹命名为主题的名字</p><p><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_09-56-33.xhx8o5z5d9.png" alt=""></p><hr><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>在博客的目录下有一个叫<code>_config.yml</code>的文件</p><p>将它打开</p><p><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_10-01-51.gwst228nama.png" alt=""></p><p>找到<code>themes</code>这一行，然后将主题名字修改为next</p><p><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_10-02-23.58o49hkjdki.png" alt=""></p><p>这样的话，主题就成功更换了</p><hr><h2 id="预览主题"><a href="#预览主题" class="headerlink" title="预览主题"></a>预览主题</h2><p>在博客目录打开git bash</p><p>执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>还是会出现一段浏览地址，我们在浏览器打开就行了</p><p><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_10-04-16.2dvd68y21dm.png" alt=""></p><blockquote><p>注意：有些主题你更换之后是暂时无法预览的，因为有的主题还需要安装它需要的依赖，这一般都会在主题的文档里面提到，只有安装它的依赖之后才可以正常预览</p></blockquote><hr><h2 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h2><p>我们需要认识两个文件</p><ul><li>站点配置文件</li></ul><p>指的是博客根目录下的<code>_config.yml</code></p><p><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_10-01-51.gwst228nama.png" alt=""></p><ul><li>主题配置文件</li></ul><p>指的是某个主题下的<code>_config.yml</code></p><p>它们的名字都叫<code>_config.yml</code>但是你不能弄混淆</p><p><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_10-11-13.qayjeoclrer.png" alt="image"></p><p>在我们看主题文档配置的时候，是必须要分清这两个概念的，不然会报错</p><hr><h2 id="coding"><a href="#coding" class="headerlink" title="coding"></a>coding</h2><blockquote><p><a href="https://coding.net/user" target="_blank" rel="noopener">https://coding.net/user</a></p></blockquote><p>注册一个coding的账号，这里不做演示</p><p>然后按照图片新建一个项目</p><p><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_12-25-47.8py42ifi1g3.png" alt="image"></p><p>选择devops</p><p><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_12-25-58.sm3tn54wui.png" alt="image"></p><p>填入相关信息，记得勾选<strong><code>启用README.cd文件初始化项目</code></strong></p><p><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_12-26-29.u2pyq6c928.png" alt="image"></p><p>然后完成创建</p><hr><blockquote><p>我们暂时不能直接上传，需要进行一些配置，如下：</p></blockquote><p>接下来需要我们创建一个git秘钥</p><p>打开git bash（不要求在哪个目录）</p><p>执行： “这里面是你的邮箱”</p><p>不管出现什么信息，你只需要回车就可以了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C “your_email@youremail.com“</span><br></pre></td></tr></table></figure><p>然后执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>会输出你的秘钥，我们复制输出信息就行了</p><p>然后点击头像，打开个人设置–选择SSH公钥–新增公钥</p><p><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_12-33-54.hlvuud9w9ns.png" alt="image"></p><p>然后将你复制的秘钥粘贴进去，记得勾选永久有效</p><p><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_12-34-42.zd3za7e4a6e.png" alt="image"></p><hr><p>然后打开git bash</p><p>执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@git.coding.net</span><br></pre></td></tr></table></figure><p>会提示你下面这个，输入yes回车就行了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Are you sure you want to continue connecting (yes/no/[fingerprint])?</span><br></pre></td></tr></table></figure><hr><p>接下来打开你的项目选择SSH，然后复制右边git开头的地址</p><p><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_12-38-33.r8subsc5h7k.png" alt="image"></p><p>打开站点配置文件</p><p>修改deploy信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: 你复制的地址</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>例如：</p><p><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_12-44-14.it2uh45m4jq.png" alt="image"></p><p>在博客根目录下打开git bash</p><p>分别执行下面的命令：</p><p>yourname是你的名字</p><p>youremail是你的邮箱</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name "yourname"</span><br><span class="line">git config --global user.email "youremail"</span><br></pre></td></tr></table></figure><p>然后安装上传插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><hr><h3 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h3><blockquote><p>以上的配置完成之后，就可以上传了</p></blockquote><p>在博客根目录下打开git bash，执行下面的命令就可以上传了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_12-49-05.lkmgvzcdzwh.png" alt="image"></p><p>然后打开项目，打开构建与部署–静态网站–立即发布静态网站</p><blockquote><p>注意：coding需要实名认证，只需要你输入身份证号就可以了，不用担心泄露隐私，因为coding现在是腾讯的</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_12-50-05.b57ma6w5win.png" alt="image"></p><p>我们只要填写网站名称就行了，然后保存</p><p><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_12-50-36.6fwfau0xu0w.png" alt="image"></p><p>因为是刚构建的网站，所以要手动部署一下，以后上传就不需要手动部署</p><p><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_12-55-02.ki4y7hiyo2b.png" alt="image"></p><p>然后访问所给的地址，那个就是我们网站的地址了</p><p><img src="https://cdn.jsdelivr.net/gh/kjhuanhao/blogcdn/img/Snipaste_2020-02-29_12-56-21.b5y903lp4hk.png" alt="image"></p><p>之后每次修改完博客要上传的时候，只需执行上传命令</p><blockquote><p>注：github部署不做说明</p></blockquote><hr><h2 id="git分支进行多终端工作"><a href="#git分支进行多终端工作" class="headerlink" title="git分支进行多终端工作"></a>git分支进行多终端工作</h2><p>问题来了，如果你现在在自己的笔记本上写的博客，部署在了网站上，那么你在家里用台式机，或者实验室的台式机，发现你电脑里面没有博客的文件，或者要换电脑了，最后不知道怎么移动文件，怎么办？</p><p>在这里我们就可以利用git的分支系统进行多终端工作了，这样每次打开不一样的电脑，只需要进行简单的配置和在Coding上把文件同步下来，就可以无缝操作了。</p><hr><h3 id="机制"><a href="#机制" class="headerlink" title="机制"></a>机制</h3><p>机制是这样的，由于<code>hexo d</code>上传部署到Coding的其实是hexo编译后的文件，是用来生成网页的，不包含源文件。</p><p>也就是上传的是在本地目录里自动生成的<code>.deploy_git</code>里面。</p><p>其他文件 ，包括我们写在source 里面的，和配置文件，主题文件，都没有上传到Coding</p><p>所以可以利用git的分支管理，将源文件上传到Coding的另一个分支即可。</p><hr><h3 id="上传分支"><a href="#上传分支" class="headerlink" title="上传分支"></a>上传分支</h3><p>首先，先在Coding上新建一个hexo分支</p><p>然后在这个仓库的分支设置中，选择默认分支为hexo分支（这样每次同步的时候就不用指定分支，比较方便）。</p><p>然后在本地的任意目录下，打开git bash，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@e.coding.net:eawakeofi/Colsrch/Colsrch.git</span><br></pre></td></tr></table></figure><p>将其克隆到本地，因为默认分支已经设成了hexo，所以clone时只clone了hexo。</p><p>接下来在克隆到本地的Coding中，把除了.git 文件夹外的所有文件都删掉</p><p>把之前我们写的博客源文件全部复制过来，除了.deploy_git。这里应该说一句，复制过来的源文件应该有一个.gitignore，用来忽略一些不需要的文件，如果没有的话，自己新建一个，在里面写上如下，表示这些类型文件不需要git：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules&#x2F;</span><br><span class="line">public&#x2F;</span><br><span class="line">.deploy*&#x2F;</span><br></pre></td></tr></table></figure><p>注意，如果你之前克隆过theme中的主题文件，那么应该把主题文件中的<code>.git</code>文件夹删掉，因为git不能嵌套上传，最好是显示隐藏文件，检查一下有没有，否则上传的时候会出错，导致你的主题文件无法上传，这样你的配置在别的电脑上就用不了了。</p><p>而后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add -A</span><br><span class="line">git commit –m "add branch"</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>这样就上传完了，可以去你的Coding上看一看hexo分支有没有上传上去，其中<code>node_modules</code>、<code>public</code>、<code>db.json</code>已经被忽略掉了，没有关系，不需要上传的，因为在别的电脑上需要重新输入命令安装 。</p><hr><h3 id="更换电脑操作"><a href="#更换电脑操作" class="headerlink" title="更换电脑操作"></a>更换电脑操作</h3><p>一样的，跟之前的环境搭建一样，</p><p>一样的，跟之前的环境搭建一样，</p><ul><li><p>安装git</p><ul><li>设置git全局邮箱和用户名</li><li>设置ssh key</li></ul></li><li><p>安装nodejs</p></li><li><p>安装hexo</p><blockquote><p>但是已经不需要初始化了</p></blockquote></li></ul><p>直接在任意文件夹下，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@………………</span><br></pre></td></tr></table></figure><p>然后进入克隆到的文件夹：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>生成，部署：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>然后就可以开始写你的新博客了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new "文章名"</span><br></pre></td></tr></table></figure><p>Tips:</p><p>不要忘了，每次写完最好都把源文件上传一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add -A</span><br><span class="line">git commit -m "xxx"</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>如果是在已经编辑过的电脑上，已经有clone文件夹了，那么，每次只要和远端同步一下就行了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><hr><h2 id="Coding-page和github-page实现国内外分流"><a href="#Coding-page和github-page实现国内外分流" class="headerlink" title="Coding page和github page实现国内外分流"></a>Coding page和github page实现国内外分流</h2><h3 id="1-申请github账户，新建项目"><a href="#1-申请github账户，新建项目" class="headerlink" title="1. 申请github账户，新建项目"></a>1. 申请github账户，新建项目</h3><p>先申请一个账户，然后创建新的项目，这一步项目名称应该是随意的，如若是个人主页则为username.github.io。</p><hr><h3 id="2-添加ssh-key"><a href="#2-添加ssh-key" class="headerlink" title="2. 添加ssh key"></a>2. 添加ssh key</h3><p>有关SSH的添加方法我在之前的文章已经说过了。<a href="https://colsrch.top/2020/04/16/git-command/">Git常用命令</a></p><hr><h3 id="3-修改-config-yml"><a href="#3-修改-config-yml" class="headerlink" title="3. 修改_config.yml"></a>3. 修改_config.yml</h3><p>hexo官方文档是这样的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  message: [message]</span><br><span class="line">  repo:</span><br><span class="line">    github: &lt;repository url&gt;,[branch]</span><br><span class="line">    coding: &lt;repository url&gt;,[branch]</span><br></pre></td></tr></table></figure><p>那么，我们只需要：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: </span><br><span class="line">    coding: git@e.coding.net:eawakeofi/Colsrch/Colsrch.git,master</span><br><span class="line">    github: git@github.com:1332925715/1332925715.github.io.git,master</span><br></pre></td></tr></table></figure><hr><h3 id="4-部署"><a href="#4-部署" class="headerlink" title="4. 部署"></a>4. 部署</h3><p>保存一下，直接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>这样就可以在github的项目上看到你部署的文件了。</p><hr><h3 id="5-开启github-pages服务，绑定域名"><a href="#5-开启github-pages服务，绑定域名" class="headerlink" title="5. 开启github pages服务，绑定域名"></a>5. 开启github pages服务，绑定域名</h3><h3 id="6-腾讯云添加解析"><a href="#6-腾讯云添加解析" class="headerlink" title="6. 腾讯云添加解析"></a>6. 腾讯云添加解析</h3><p>这个时候就可以把添加github的解析为境外了，Coding的解析为默认。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>首先感谢<a href="https://mrhuanhao.cn/" target="_blank" rel="noopener">Huanhao</a>制作的hexo博客搭建教程及<a href="https://me.csdn.net/sinat_37781304" target="_blank" rel="noopener">zjufangzh</a>的多终端编辑和分流部署教程</p><blockquote><p>Huanhao hexo博客搭建教程：<a href="https://mrhuanhao.cn/2020/03/23/hexobase/" target="_blank" rel="noopener">https://mrhuanhao.cn/2020/03/23/hexobase/</a></p><p>zjufangzh原文链接：<a href="https://blog.csdn.net/sinat_37781304/article/details/82729029" target="_blank" rel="noopener">https://blog.csdn.net/sinat_37781304/article/details/82729029</a></p><p>Hexo中文站：<a href="https://www.hexocn.cn/" target="_blank" rel="noopener">https://www.hexocn.cn/</a></p></blockquote><p><strong>本篇主要为初学者或无经验者整理编写，只需要指令的小伙伴可以看我下一篇文章</strong></p>]]></content>
    
    <summary type="html">
    
      Hexo搭建步骤1. 安装Git 2. 安装Node.js 3. 安装cnpm 4. 安装Hexo 5. 生成SSH添加到Coding 6. 将hexo部署到Coding 7. 设置个人域名 8. 发布文章 9. 配置多终端工作
    
    </summary>
    
    
      <category term="Hexo" scheme="https://colsrch.top/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://colsrch.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>MFC中CListCtrl的Report基本用法</title>
    <link href="https://colsrch.top/posts/467014d7/"/>
    <id>https://colsrch.top/posts/467014d7/</id>
    <published>2020-04-16T14:11:28.000Z</published>
    <updated>2020-07-15T10:55:28.358Z</updated>
    
    <content type="html"><![CDATA[<p>前几个月我们老师因为每次考试结束后统分都非常麻烦，由于知道我在学编程，便让我试着做一下成绩自动分析工具。</p><p>其中我用到了ClistCtrl的Report报表形式，此处便记录下相关的代码，本篇为list的初始化和单击单元格实现输入的功能</p><a id="more"></a><hr><p>第一步就是添加ClistCtrl控件，然后为其添加变量，此处我们将其变量设为<strong>“ m_list_input ”</strong>。<strong>&gt;不会的小伙伴可以自行百度查找一下教程&lt;</strong>，本篇主要是介绍代码。</p><hr><h3 id="ClistCtrl初始化"><a href="#ClistCtrl初始化" class="headerlink" title="ClistCtrl初始化"></a>ClistCtrl初始化</h3><p><strong>此处仅为示例代码，具体根据自己的项目修改</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">CRect <span class="built_in">rect</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取输入（INPUT）列表视图控件的位置和大小   </span></span><br><span class="line">m_list_input.GetClientRect(&amp;<span class="built_in">rect</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为列表视图控件添加全行选中和栅格风格   </span></span><br><span class="line">m_list_input.SetExtendedStyle(m_list_input.GetExtendedStyle() | LVS_EX_FULLROWSELECT | LVS_EX_GRIDLINES);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为列表视图控件添加七列   </span></span><br><span class="line">m_list_input.InsertColumn(<span class="number">0</span>, _T(<span class="string">"序号"</span>), LVCFMT_CENTER, <span class="built_in">rect</span>.Width() / <span class="number">7</span>, <span class="number">0</span>);</span><br><span class="line">m_list_input.InsertColumn(<span class="number">1</span>, _T(<span class="string">"姓名"</span>), LVCFMT_CENTER, <span class="built_in">rect</span>.Width() / <span class="number">7</span>, <span class="number">1</span>);</span><br><span class="line">m_list_input.InsertColumn(<span class="number">2</span>, _T(<span class="string">"语文"</span>), LVCFMT_CENTER, <span class="built_in">rect</span>.Width() / <span class="number">7</span>, <span class="number">2</span>);</span><br><span class="line">m_list_input.InsertColumn(<span class="number">3</span>, _T(<span class="string">"数学"</span>), LVCFMT_CENTER, <span class="built_in">rect</span>.Width() / <span class="number">7</span>, <span class="number">3</span>);</span><br><span class="line">m_list_input.InsertColumn(<span class="number">4</span>, _T(<span class="string">"英语"</span>), LVCFMT_CENTER, <span class="built_in">rect</span>.Width() / <span class="number">7</span>, <span class="number">4</span>);</span><br><span class="line">m_list_input.InsertColumn(<span class="number">5</span>, _T(<span class="string">"总分"</span>), LVCFMT_CENTER, <span class="built_in">rect</span>.Width() / <span class="number">7</span>, <span class="number">5</span>);</span><br><span class="line">m_list_input.InsertColumn(<span class="number">6</span>, _T(<span class="string">"名次"</span>), LVCFMT_CENTER, <span class="built_in">rect</span>.Width() / <span class="number">7</span>, <span class="number">6</span>);</span><br></pre></td></tr></table></figure><hr><h3 id="单击单元格输入数据"><a href="#单击单元格输入数据" class="headerlink" title="单击单元格输入数据"></a>单击单元格输入数据</h3><p>首先，我们需要添加一个Edit控件，并为其设置默认不显示属性。对其添加变量为<strong>” m_edit_input “</strong></p><p>接下来我们重写OnClick函数实现单击显示Edit控件并出现在相应的位置。代码如下</p><ol><li><p>先在头文件中添加m_Row和m_Col，用来保存鼠标单击的行号和列标</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> m_Row = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> m_Col = <span class="number">-1</span>;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>在cpp文件OnClick中输入如下代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CxxxxProDlg::OnClickListInput</span><span class="params">(NMHDR* pNMHDR, LRESULT* pResult)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LPNMITEMACTIVATE pNMItemActivate = <span class="keyword">reinterpret_cast</span>&lt;LPNMITEMACTIVATE&gt;(pNMHDR);</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 在此添加控件通知处理程序代码</span></span><br><span class="line">CRect rc;</span><br><span class="line">CString strTemp;</span><br><span class="line">NM_LISTVIEW* pNMListView = (NM_LISTVIEW*)pNMHDR;</span><br><span class="line">m_Row = pNMListView-&gt;iItem;</span><br><span class="line">m_Col = pNMListView-&gt;iSubItem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (m_Col != <span class="number">0</span>) <span class="comment">// 选择子项  </span></span><br><span class="line">&#123;</span><br><span class="line">m_list_input.GetSubItemRect(m_Row, m_Col, LVIR_LABEL, rc);</span><br><span class="line">m_edit_input.SetParent(&amp;m_list_input);</span><br><span class="line">m_edit_input.MoveWindow(rc);</span><br><span class="line">m_edit_input.SetWindowTextW(m_list_input.GetItemText(m_Row, m_Col));</span><br><span class="line">m_edit_input.ShowWindow(SW_SHOW);</span><br><span class="line">m_edit_input.SetFocus();<span class="comment">//设置Edit焦点  </span></span><br><span class="line">m_edit_input.ShowCaret();<span class="comment">//显示光标  </span></span><br><span class="line">m_edit_input.SetSel(<span class="number">0</span>, <span class="number">-1</span>);<span class="comment">//全选  </span></span><br><span class="line">&#125;</span><br><span class="line">*pResult = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>最后我们输入完数据后需要将该数据存入对应的单元格中，代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CxxxxProDlg::OnKillfocusEdit1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span>  在此添加控件通知处理程序代码</span></span><br><span class="line">CString str;</span><br><span class="line">m_edit_input.GetWindowTextW(str);</span><br><span class="line">m_list_input.SetItemText(m_Row, m_Col, str);</span><br><span class="line">m_edit_input.ShowWindow(SW_HIDE);</span><br></pre></td></tr></table></figure><hr><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>有疑问欢迎在评论区提出来哦~！</p><p>由于学业繁忙，再加上最近这段时间都在弄网站，没怎么写C/C++代码。这些代码解释起来都有点不太记得！</p><p>最后给出两张我这个项目的图片</p><p><img src="https://cdn.jsdelivr.net/gh/Colsrch/images@V1.1/Colsrch/JE9vYF.png" alt="JE9vYF.png"><br><img src="https://cdn.jsdelivr.net/gh/Colsrch/images@V1.1/Colsrch/JE9OoT.png" alt="JE9OoT.png"></p><blockquote><p>成绩自动分析工具Pro</p><p><a href="https://colsrch.top/wiki/papro">https://colsrch.top/wiki/papro</a></p></blockquote><p><strong>有兴趣的小伙伴可以去下载看看。如果你有需要可以向我留言定制哦！</strong></p><p><strong><em>这有没有打广告的嫌疑😂</em></strong></p>]]></content>
    
    <summary type="html">
    
      第一步就是添加ClistCtrl控件，然后为其添加变量，此处我们将其变量设为
    
    </summary>
    
    
      <category term="C/C++" scheme="https://colsrch.top/categories/C-C/"/>
    
      <category term="MFC" scheme="https://colsrch.top/categories/C-C/MFC/"/>
    
      <category term="ClistCtrl" scheme="https://colsrch.top/categories/C-C/MFC/ClistCtrl/"/>
    
    
      <category term="C/C++" scheme="https://colsrch.top/tags/C-C/"/>
    
      <category term="MFC" scheme="https://colsrch.top/tags/MFC/"/>
    
      <category term="ClistCtrl" scheme="https://colsrch.top/tags/ClistCtrl/"/>
    
  </entry>
  
  <entry>
    <title>VC中如何从字符串中分离文件名与路径（CString）(转)</title>
    <link href="https://colsrch.top/posts/85033c71/"/>
    <id>https://colsrch.top/posts/85033c71/</id>
    <published>2020-04-16T13:48:47.000Z</published>
    <updated>2020-07-15T10:55:28.358Z</updated>
    
    <content type="html"><![CDATA[<p>之前写过一个音乐播放器程序，里面的播放列表、播放历史等控件需要分离路径，因此查过一些资料，这里为了避免以后需使用时遗忘，便将其记录下来</p><a id="more"></a><h3 id="获取文件路径"><a href="#获取文件路径" class="headerlink" title="获取文件路径"></a>获取文件路径</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CString strPath;</span><br><span class="line"><span class="keyword">int</span> n=m_strOriFileName.ReverseFind(<span class="string">'\\'</span>)+<span class="number">1</span>;</span><br><span class="line">strPath=m_strOriFileName.Left(n);</span><br></pre></td></tr></table></figure><h3 id="获取文件名"><a href="#获取文件名" class="headerlink" title="获取文件名"></a>获取文件名</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CString strFile;</span><br><span class="line"><span class="keyword">int</span> n=m_strUntFileName.GetLength()-m_strOriFileName.ReverseFind(<span class="string">'\\'</span>)<span class="number">-1</span>;</span><br><span class="line">strFile=m_strOriFileName.Right(n);</span><br></pre></td></tr></table></figure><h3 id="获取文件后缀名"><a href="#获取文件后缀名" class="headerlink" title="获取文件后缀名"></a>获取文件后缀名</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CString strFileType;</span><br><span class="line"><span class="keyword">int</span> n=m_strUntFileName.GetLength()-m_strOriFileName.ReverseFind(<span class="string">'.'</span>)<span class="number">-1</span>;</span><br><span class="line">strFileType=m_strOriFileName.Right(n);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      之前写过一个音乐播放器程序，里面的播放列表、播放历史等控件需要分离路径，因此查过一些资料，这里为了避免以后需使用时遗忘，便将其记录下来
    
    </summary>
    
    
      <category term="C/C++" scheme="https://colsrch.top/categories/C-C/"/>
    
      <category term="CString" scheme="https://colsrch.top/categories/C-C/CString/"/>
    
    
      <category term="C/C++" scheme="https://colsrch.top/tags/C-C/"/>
    
      <category term="CString" scheme="https://colsrch.top/tags/CString/"/>
    
  </entry>
  
  <entry>
    <title>Git常用命令</title>
    <link href="https://colsrch.top/posts/caff8000/"/>
    <id>https://colsrch.top/posts/caff8000/</id>
    <published>2020-04-16T09:07:45.000Z</published>
    <updated>2020-07-15T10:55:28.358Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>博客建成至现在一直没更新，主要是学习比较繁忙，为了加快我博客的收录，准备花几天的时间把我以前写代码用到的以及不会的记录下来，避免以后要用的时候又忘了！</p><p>本篇记录下我使用Git常用的命令，算是个开头😂！</p><a id="more"></a><hr><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>使用Git的第一件事就是将其配置好，其中需要配置“用户名”、“邮箱”、“创建SSH”</p><p>首先在Git的安装目录中打开”git-bash.exe“</p><p><strong>1.配置用户名及邮箱</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"Your Name"</span></span><br><span class="line">git config --global user.email <span class="string">"your_email@example.com"</span></span><br></pre></td></tr></table></figure><p>为了记住用户名和邮箱我们还需要执行下面这个命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure><p><strong>2.创建SSH</strong></p><p>在命令行中输入这个命令，之后一直回车即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p><strong>3.配置SSH</strong></p><p>由于博主使用Coding的代码托管，因此讲一下Coding的SSH配置，其他请自行百度查找教程</p><p>首先打开“C:\Users\用户名\.ssh”文件夹，右击“id_rsa.pub”文件，选择用记事本打开，复制里面的所有内容</p><p>然后登录Coding，在右上角头像处选择<strong>“个人设置”</strong>，然后选择<strong>“SSH公钥”</strong>。单击<strong>“新增公钥”</strong>，在<strong>“公钥内容”</strong>中粘贴刚刚复制的内容，<strong>”公钥名称“</strong>可不填，勾选<strong>”永久有效“</strong>，单击<strong>”添加“</strong>就可以。</p><p>至此，SSH就配置好了</p><hr><h3 id="新建代码库"><a href="#新建代码库" class="headerlink" title="新建代码库"></a>新建代码库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在当前目录新建一个Git代码库</span></span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个目录，将其初始化为Git代码库</span></span><br><span class="line">git init [project-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载一个项目和它的整个代码历史</span></span><br><span class="line">git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></table></figure><hr><h3 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加/删除文件"></a>增加/删除文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加指定文件到暂存区</span></span><br><span class="line">git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></span><br><span class="line">git add [dir]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加每个变化前，都会要求确认</span></span><br><span class="line"><span class="comment"># 对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class="line">git add -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class="line">git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line">git rm --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class="line">git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure><p>我一般就是直接添加所有文件到暂存区,代码如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add -A</span><br></pre></td></tr></table></figure><hr><h3 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提交暂存区到仓库区（常用）</span></span><br><span class="line">git commit -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交暂存区的指定文件到仓库区</span></span><br><span class="line">git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class="line">git commit -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交时显示所有diff信息</span></span><br><span class="line">git commit -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用一次新的commit，替代上一次提交</span></span><br><span class="line"><span class="comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class="line">git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class="line">git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure><hr><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分支</span></span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有远程分支</span></span><br><span class="line">git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有本地分支和远程分支</span></span><br><span class="line">git branch -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></span><br><span class="line">git branch [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></span><br><span class="line">git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向指定commit</span></span><br><span class="line">git branch [branch] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line">git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到指定分支，并更新工作区</span></span><br><span class="line">git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到上一个分支</span></span><br><span class="line">git checkout -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class="line">git branch --<span class="built_in">set</span>-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line">git merge [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择一个commit，合并进当前分支</span></span><br><span class="line">git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">git push origin --delete [branch-name]</span><br><span class="line">git branch -dr [remote/branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地存在一个分支，名称叫：develop_chen，但远程没有怎么办？</span></span><br><span class="line">git push origin develop_chen</span><br><span class="line"></span><br><span class="line">这样就在远程建立一个和本地一样的分支 </span><br><span class="line"></span><br><span class="line">git branch --<span class="built_in">set</span>-upstream-to=origin/develop  develop  本地分支和远程分支建立跟踪关系</span><br></pre></td></tr></table></figure><hr><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有tag</span></span><br><span class="line">git tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在当前commit</span></span><br><span class="line">git tag [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在指定commit</span></span><br><span class="line">git tag [tag] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除本地tag</span></span><br><span class="line">git tag -d [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程tag</span></span><br><span class="line">git push origin :refs/tags/[tagName]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看tag信息</span></span><br><span class="line">git show [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交指定tag</span></span><br><span class="line">git push [remote] [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交所有tag</span></span><br><span class="line">git push [remote] --tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向某个tag</span></span><br><span class="line">git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure><hr><h3 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示有变更的文件</span></span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的版本历史</span></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class="line">git <span class="built_in">log</span> --<span class="built_in">stat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索提交历史，根据关键词</span></span><br><span class="line">git <span class="built_in">log</span> -S [keyword]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class="line">git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件</span></span><br><span class="line">git <span class="built_in">log</span> [tag] HEAD --grep feature</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个文件的版本历史，包括文件改名</span></span><br><span class="line">git <span class="built_in">log</span> --follow [file]</span><br><span class="line">git whatchanged [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件相关的每一次diff</span></span><br><span class="line">git <span class="built_in">log</span> -p [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示过去5次提交</span></span><br><span class="line">git <span class="built_in">log</span> -5 --pretty --oneline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有提交过的用户，按提交次数排序</span></span><br><span class="line">git shortlog -sn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件是什么人在什么时间修改过</span></span><br><span class="line">git blame [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和工作区的代码差异</span></span><br><span class="line">git diff</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和上一个commit的差异</span></span><br><span class="line">git diff --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示工作区与当前分支最新commit之间的差异</span></span><br><span class="line">git diff HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示两次提交之间的差异</span></span><br><span class="line">git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示今天你写了多少行代码</span></span><br><span class="line">git diff --shortstat <span class="string">"@&#123;0 day ago&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交的元数据和内容变化</span></span><br><span class="line">git show [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交发生变化的文件</span></span><br><span class="line">git show --name-only [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交时，某个文件的内容</span></span><br><span class="line">git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的最近几次提交</span></span><br><span class="line">git reflog<span class="comment"># 从本地master拉取代码更新当前分支：branch 一般为master</span></span><br><span class="line">git rebase [branch]</span><br></pre></td></tr></table></figure><hr><h3 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">git remote update  --更新远程仓储</span><br><span class="line"><span class="comment"># 下载远程仓库的所有变动</span></span><br><span class="line">git fetch [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有远程仓库</span></span><br><span class="line">git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个远程仓库的信息</span></span><br><span class="line">git remote show [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></span><br><span class="line">git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class="line">git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></span><br><span class="line">git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line">git push [remote] --force</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送所有分支到远程仓库</span></span><br><span class="line">git push [remote] --all</span><br></pre></td></tr></table></figure><hr><h3 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 恢复暂存区的指定文件到工作区</span></span><br><span class="line">git checkout [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class="line">git checkout [commit] [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复暂存区的所有文件到工作区</span></span><br><span class="line">git checkout .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class="line">git reset [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class="line">git reset --hard</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class="line">git reset [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class="line">git reset --hard [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class="line">git reset --keep [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个commit，用来撤销指定commit</span></span><br><span class="line"><span class="comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class="line">git revert [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂时将未提交的变化移除，稍后再移入</span></span><br><span class="line">git stash</span><br><span class="line">git stash pop</span><br></pre></td></tr></table></figure><hr><h3 id="其他（合并两个分支：Merge）"><a href="#其他（合并两个分支：Merge）" class="headerlink" title="其他（合并两个分支：Merge）"></a>其他（合并两个分支：Merge）</h3><p>1，将开发分支代码合入到master中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git checkout dev           <span class="comment">#切换到dev开发分支</span></span><br><span class="line">git pull</span><br><span class="line">git checkout master</span><br><span class="line">git merge dev              <span class="comment">#合并dev分支到master上</span></span><br><span class="line">git push origin master     <span class="comment">#将代码推到master上</span></span><br></pre></td></tr></table></figure><p>　2，将master的代码同步更新到开发分支中</p><p>　　merge方法：保证主干提交线干净(可以安全回溯)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git pull</span><br><span class="line">git checkout dev</span><br><span class="line">git merge master</span><br><span class="line">git pull origin dev</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成一个可供发布的压缩包</span></span><br><span class="line">git archive</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      使用Git的第一件事就是将其配置好，其中需要配置“用户名”、“邮箱”、“创建SSH”
    
    </summary>
    
    
      <category term="Git" scheme="https://colsrch.top/categories/Git/"/>
    
    
      <category term="Git常用命令" scheme="https://colsrch.top/tags/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>希望四年后 都会如我们所愿</title>
    <link href="https://colsrch.top/posts/5b2f25a9/"/>
    <id>https://colsrch.top/posts/5b2f25a9/</id>
    <published>2020-04-10T15:26:23.000Z</published>
    <updated>2020-07-15T10:55:28.358Z</updated>
    
    <content type="html"><![CDATA[<p>2020年真是多事之年，新冠爆发、20200202千年难遇、又刚好是4年才一次的二月、也是我高中毕业的一年、还是我即将成年的一年。</p><a id="more"></a><p>时间告诉我，无理取闹的年纪已经过了，该努力了。 </p><p>希望四年后 都会如我们所愿</p><p><img src="https://cdn.jsdelivr.net/gh/Colsrch/images@V1.1/Colsrch/G78BtI.png" alt="G78BtI.png"></p>]]></content>
    
    <summary type="html">
    
      2020年真是多事之年，新冠爆发、20200202千年难遇、又刚好是4年才一次的二月、也是我高中毕业的一年、还是我即将成年的一年。
    
    </summary>
    
    
      <category term="杂文" scheme="https://colsrch.top/categories/%E6%9D%82%E6%96%87/"/>
    
    
      <category term="杂文" scheme="https://colsrch.top/tags/%E6%9D%82%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>自述</title>
    <link href="https://colsrch.top/posts/65082d4c/"/>
    <id>https://colsrch.top/posts/65082d4c/</id>
    <published>2020-04-10T15:10:07.000Z</published>
    <updated>2020-07-15T10:55:28.358Z</updated>
    
    <content type="html"><![CDATA[<p>嘿！你们好啊，这里是Colsrch 叫我凉寻就好啦，目前是<a id="more"></a>高三应届毕业生。</p><p>快要毕业考大学了，但不碰巧，在这个鼠年遇到新冠(COVID-19)了，硬生生的把寒假过成了暑假。害！不管它了，说说我学C的经历吧。</p><p>我从小学六年级开始，就痴迷于电脑，虽然也玩游戏，但不像那种网瘾少年一样，整天沉迷于游戏，平时不玩游戏的时候就在研究电脑。就这样，电脑陪伴了我整个初中。</p><p>还记得那时候初三，我想着如果考不上我就读个中专然后做个小主播，拍点视频。那时候这一行业不是很火啊，我就想着干这个。</p><p>我想学编程是什么时候呢，就是初三寒假的时候，我有一个表叔，他是学计算机的，也是编程，研究生毕业，具体是做什么我不太清楚。我那时候就想，编程好像很难，但是呢，我从内心里就升起了这个兴趣。</p><p>我高二的时候，也就是2018年下半年，那时候我坚定了自己学编程的决心。然后就叫我父母给我买书，那时候吧也不知道该买哪本，就找了本评论好的，由于学的是三校生，所以也没老师能够教我。就这样靠着那本书学了一年，说实话我感觉我这一年几乎是白学了。因为这书里有好多错误的例子，很多实例都是错的，不仅仅我自己写的编译不通过，就是拿着它送的光盘里面的源码编译也是不通过的。去年买的另一种书来学，我感觉那本书写的很好，代码很规范，也教我们如何写规范。</p><p>不过呢，光靠看书自学是完全不够的，我大学之后会去一些机构学习。</p><p>再说说这个寒假吧，在家无聊，我就顺便去学了下html，不然也就不会有你们现在看到的这些了，哈哈哈。</p><p>我的梦想是有一个工作室，有房子……</p><p>要实现这个梦想，首先当然要好好学技术啦，所以才有这个网站的出生。以后基本上我用过的技术都会整理输出在这里。以后的以后，可能会有一些小软件或者小工具分享出来。</p><p>然后呢，当然还需要大家的支持啦。扫一扫，马上支持！发达了保证请吃饭！</p><p><img src="https://cdn.jsdelivr.net/gh/Colsrch/images@V1.1/Colsrch/Alipay.png" alt="支付宝"></p><p><img src="https://cdn.jsdelivr.net/gh/Colsrch/images@V1.1/Colsrch/Wechat.png" alt="微信"></p><p>总之呢，这个梦想，可能需要我灌注毕生的精力。慢慢来吧！</p>]]></content>
    
    <summary type="html">
    
      嘿！你们好啊，这里是Colsrch 叫我凉寻就好啦，目前是高三应届毕业生。
    
    </summary>
    
    
    
      <category term="自述" scheme="https://colsrch.top/tags/%E8%87%AA%E8%BF%B0/"/>
    
  </entry>
  
</feed>
